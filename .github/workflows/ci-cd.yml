name: ci-cd

on:
  push:
    branches: ['production']
  pull_request:
    branches: ['production']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-22.04
    outputs:
      APP_IMAGE: ${{ steps.setImageName.outputs.APP_IMAGE }}
    permissions:
      id-token: write
      packages: write
      contents: read
      attestations: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./.docker/github/app/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        id: artifact
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Create output var
        id: setImageName
        run: echo "APP_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.push.outputs.digest }}" >> "$GITHUB_OUTPUT"

  deploy:
    needs: [build]
    runs-on: self-hosted
    permissions: write-all
    environment: production
    env:
      APP_IMAGE: ${{needs.build.outputs.APP_IMAGE}}
      DB_PASSWORD: ${{vars.DB_PASSWORD}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          clean: 'false'

      - name: Stop all containers
        run: docker stop $(docker ps -a -q) || true

      - name: Remove unused containers.
        run: docker rm $(docker ps --filter status=exited -q) || true

      - name: Remove unused images.
        run: docker image prune -a -f || true

      - name: Remove remove anonymous local volumes.
        run:  docker volume prune -f || true

      - name: Copy .env
        run: cp .env.production .env

      - name: Docker compose up2
        run: docker compose -f docker-compose.prod.yml up -d

      - run: echo ${{ vars.CONTAINER_PREFIX }}

      - run: docker exec ${{ vars.CONTAINER_PREFIX }}_app composer install
      - run: docker exec ${{ vars.CONTAINER_PREFIX }}_app npm install
      - run: docker exec ${{ vars.CONTAINER_PREFIX }}_app npm run build
      - run: docker exec ${{ vars.CONTAINER_PREFIX }}_app php artisan migrate --force
      - run: docker exec ${{ vars.CONTAINER_PREFIX }}_app php artisan key:generate
      - run: docker exec ${{ vars.CONTAINER_PREFIX }}_app php artisan mystore:install
      - run: docker exec ${{ vars.CONTAINER_PREFIX }}_app chmod -R 777 ./storage
      - run: docker exec ${{ vars.CONTAINER_PREFIX }}_app chmod -R 775 ./bootstrap/cache
      - run: docker exec ${{ vars.CONTAINER_PREFIX }}_app cron
      - run: docker exec ${{ vars.CONTAINER_PREFIX }}_app supervisord
      - run: docker exec ${{ vars.CONTAINER_PREFIX }}_app php artisan optimize


